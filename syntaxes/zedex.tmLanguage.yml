name: zedex
fileTypes:
      - zx
patterns:
      - include: "#comments"
      - include: "#keywords"
      - include: "#operators"
      - include: "#inbuilt-functions"
      - include: "#inbuilt-constants"
      - include: "#datatypes"
      - include: "#constructors"
      - include: "#strings"
      - include: "#numbers"
repository:
      comments:
            patterns:
                  - include: "#line-comment"
                  - include: "#block-comment"
      block-comment:
            begin: \{-
            end: -\}
            name: comment.block.documentation.zedex
            patterns:
                  - include: "#block-comment"
      line-comment:
            begin: --
            end: \n
            name: comment.line.double-dash.zedex
      keywords:
            patterns:
                  - name: keyword.control.zedex
                    match: \b(proof|typeclass|let|implements|where|in)\b
      operators:
            patterns:
                  - name: keyword.operator.zedex
                    match: \b(:|->|=|=>)\b
      
      inbuilt-functions:
            patterns:
                  - name: entity.name.function.zedex
                    match: \b(X|Z|H|W)\b
      
      inbuilt-constants:
            patterns:
                  - name: entity.constant.numeric
                    match: \b(e|pi|i)\b
      
      datatypes:
            patterns:
                  - include: "#type-definition"
                  - include: "#after-colon-type-signature"
                  - include: "#after-arrow-type-signature"

      type-definition:
            patterns:
                  - match: (^[A-Z][\w']*)(?=\s:=)
                    captures:
                        '1': {name: entity.name.type.zedex} # does not work

      after-colon-type-signature:
            patterns:
                  - match: ^[a-z][\w']*\s:\s([A-Z][\w']*) # neither does this
                    captures:
                        '1': {name: entity.name.type.zedex}

      after-arrow-type-signature:
            patterns:
                  - match: ->\s([A-Z][\w']*)
                    captures:
                        '1': {name: entity.name.type.zedex}
      
      constructors:
            patterns:
                  - include: "#after-definition"
                  - include: "#after-pipe"
                  - include: "#after-fat-arrow"

      after-definition:
            patterns:
                  - match: :=\s([A-Z][\w']*)
                    captures:
                        '1': {name: storage.type.zedex}

      after-pipe:
            patterns:
                  - match: \|\s([A-Z][\w']*)
                    captures:
                        '1': {name: storage.type.zedex}

      after-fat-arrow:
            patterns:
                  - match: =>\s([A-Z][\w']*)
                    captures:
                        '1': {name: storage.type.zedex}

      strings:
            name: string.quoted.double.zedex
            begin: '"'
            end: '"'
            patterns:
                  - name: constant.character.escape.zedex
                    match: \\.
      numbers:
            patterns:
                  - name: constant.numeric.zedex
                    match: \b(\d+)\b
scopeName: source.zedex